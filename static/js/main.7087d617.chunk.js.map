{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","MemeGenerator","state","firstInput","secondInput","randomMeme","allMemeImg","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randnum","Math","floor","random","length","newRandMem","url","onSubmit","placeholder","type","onChange","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kNAYeA,MATf,WACC,OACC,yBAAKC,UAAU,cACd,yBAAKC,IAAM,mEACX,+C,0CCkEYC,E,kDArEd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,WAAY,GACZC,YAAa,GACbC,WAAY,mCACZC,WAAY,IAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATP,E,gEAYO,IAAD,OACnBE,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACXE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CACbV,WAAYQ,S,mCAKFG,GAAO,IAAD,EACIA,EAAMC,OAArBC,EADW,EACXA,KAAMC,EADK,EACLA,MACbC,KAAKL,SAAL,eACEG,EAAOC,M,mCAIGH,GACZA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,WAAWqB,QAC3DC,EAAaP,KAAKnB,MAAMI,WAAWiB,GAASM,IAClDR,KAAKL,SAAS,CACbX,WAAYuB,M,+BAKb,OACC,6BACC,0BAAM7B,UAAU,OAAO+B,SAAUT,KAAKZ,cACrC,2BACCsB,YAAY,iBACZC,KAAK,OACLb,KAAK,aACLC,MAAOC,KAAKnB,MAAMC,WAClB8B,SAAUZ,KAAKd,eAEhB,2BACCwB,YAAY,oBACZC,KAAK,OACLb,KAAK,cACLC,MAAOC,KAAKnB,MAAME,YAClB6B,SAAUZ,KAAKd,eAEhB,6CAEA,yBAAKR,UAAU,aACd,yBAAKC,IAAKqB,KAAKnB,MAAMG,WAAY6B,IAAI,KACrC,wBAAInC,UAAU,OAAOsB,KAAKnB,MAAMC,YAChC,wBAAIJ,UAAU,UAAUsB,KAAKnB,MAAME,mB,GA/Db+B,IAAMC,WCYnBC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4DCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7087d617.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n\r\nfunction Header() {\r\n\treturn(\r\n\t\t<div className=\"header-bar\">\r\n\t\t\t<img src = \"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" />\r\n\t\t\t<p>Meme Generator</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './App.css'\r\n\r\nclass MemeGenerator extends React.Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state=  {\r\n\t\t\tfirstInput: \"\",\r\n\t\t\tsecondInput: \"\",\r\n\t\t\trandomMeme: \"https://i.imgflip.com/2896ro.jpg\",\r\n\t\t\tallMemeImg: []\r\n\t\t}\r\n\t\tthis.handleChange = this.handleChange.bind(this)\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"https://api.imgflip.com/get_memes\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(response => {\r\n\t\t\tconst {memes} = response.data\r\n\t\t\tthis.setState({\r\n\t\t\t\tallMemeImg: memes\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\thandleChange(event){\r\n\t\tconst {name, value} = event.target\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t})\r\n\t}\r\n\r\n\thandleSubmit(event) {\r\n\t\tevent.preventDefault()\r\n\t\tconst randnum = Math.floor(Math.random() * this.state.allMemeImg.length)\r\n\t\tconst newRandMem = this.state.allMemeImg[randnum].url\r\n\t\tthis.setState({\r\n\t\t\trandomMeme: newRandMem\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<form className=\"meme\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tplaceholder=\"Enter top text\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"firstInput\"\r\n\t\t\t\t\t\tvalue={this.state.firstInput}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tplaceholder=\"Enter bottom text\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"secondInput\"\r\n\t\t\t\t\t\tvalue={this.state.secondInput}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\t\r\n\t\t\t\t\t<button>Generate</button>\r\n\t\t\t\t</form>\t\r\n\t\t\t\t\t<div className=\"image-api\">\r\n\t\t\t\t\t\t<img src={this.state.randomMeme} alt=\"\" />\r\n\t\t\t\t\t\t<h2 className=\"top\">{this.state.firstInput}</h2>\t\r\n\t\t\t\t\t\t<h2 className=\"bottom\">{this.state.secondInput}</h2>\r\n\t\t\t\t\t</div>\t\t\t\t\r\n\t\t\t</div>\t\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react';\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n      <footer>@Copyright Belle & Dan</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}